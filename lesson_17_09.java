public class lesson_17_09 {
    //Важность совместимости

    //Очень часто при выпуске новой версии программисты хотят начать все с чистого листа.
    //Ну кому охота исправлять кучу старых ошибок, когда теперь точно уверен, как нужно было делать с самого начала.

    //Однако история против такого подхода. Каждый раз, когда программисты выпускают новую версию программы,
    //90% ее пользователей — это пользователи старой версии. Они могут пользоваться новыми функциями программы или игнорировать их,
    //но вот что они ненавидят, так это если перестает работать то, что раньше отлично работало.

    //Многие отличные продукты погибли, когда программисты выпустили новые несовместимые версии.
    //Или просто внесли кардинальные изменения. Тот же Windows 8 с его идеей отказа от кнопки «Пуск» не понравился пользователям.
    //Пришлось выпускать Windows 10, в которой вернули половину того, что было удалено в Window 8.

    //С другой стороны, сейчас в Windows вы можете запустить программу,
    //написанную 20 лет назад под Windows 95 или 30 лет назад под MS DOS 3.0, и она будет работать.
    //Это одна из причин, почему Windows остается популярной.

    //Java тоже не была бы столь популярной, если бы ее разработчики не заботились о совместимости.
    //Каждый раз при выходе новой версии Java-машины, новой версии SDK, серьезных изменениях в классах,
    //весь Java-код, написанный с января 1996 года, продолжает работать.

    //Обычно это достигается за счет того, что новые методы, классы и пакеты только добавляются, но ничего не удаляется.
    //У этого подхода есть свои плюсы и минусы.

    //С одной стороны, Java тянет с собой кучу балласта в виде старого, неоптимального и ненужного кода,
    //а с другой, вы всегда можете добавить в ваш проект, написанный на Java 11, библиотеку,
    //которая написана на Java8 и использует библиотеки, написанные на Java 5 и Java 2.
    //И вся эта сборная солянка отлично будет работать.

    //В случае с языком C++ вы не можете в одном проекте использовать библиотеки,
    //скомпилированные под 32х разрядную платформу и 64х разрядную.
    //И на ровном месте получите большую головную боль,
    //если одна библиотека использует тип char длиной в один байт, а другая — в два байта.
}
