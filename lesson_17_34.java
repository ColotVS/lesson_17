public class lesson_17_34 {
    //Получение конкретной даты

    //Чтобы получить объект LocalDate, содержащий определенную дату, нужно воспользоваться статическим методом of().
    //Выглядит все тоже очень просто и понятно:
    //LocalDate date = LocalDate.of(2019, Month.FEBRUARY, 22);
    //Где date — это переменная класса LocalDate, а LocalDate.of() — вызов статического метода of() у класса LocalDate.

    //Также тут мы видим использование специальной константы FEBRUARY класса Month (java.time.Month) для задания месяца Февраль.
    //Можно задать месяц и по старинке — с помощью числа:
    //LocalDate date = LocalDate.of(2019, 2, 22);
    //Важно! Месяцы перестали нумеровать с нуля.

    //LocalDate today = LocalDate.of(2024, 3, 02);
    //System.out.println("Сегодня = " + today);


    //Получение даты по номеру дня

    //Есть еще один любопытный метод создания даты:
    //с помощью метода ofYearDay можно получить дату, имея только номер года и номер дня года.

    //Общий вид такой:
    //LocalDate date = LocalDate.ofYearDay(год, день);
    //Где год — это номер года, а день — номер дня в году.

    //LocalDate today = LocalDate.ofYearDay(2024, 62);
    //System.out.println("Сегодня = " + today);


    //Получение даты Unix

    //Помните, что объекты класса Date всегда хранили время в миллисекундах с 1 января 1970 года?
    //Чтобы программисты не скучали по старым добрым временам, в класс LocalDate добавили метод ofEpochDay(),
    //который возвращает дату, отсчитанную от 1 января 1970 года. Общий вид такой:

    //LocalDate date = LocalDate.ofEpochDay(день);
    //Где день — это количество дней, прошедшее с 1 января 1970 года.

    //LocalDate today = LocalDate.ofEpochDay(1);
    //System.out.println("Сегодня = " + today);     //Сегодня = 1970-01-02
}
